import{_ as s,c as n,o as a,a as l}from"./app.456d1034.js";const _=JSON.parse('{"title":"Kotlin协程","description":"","frontmatter":{},"headers":[{"level":2,"title":"第一个协程程序","slug":"第一个协程程序","link":"#第一个协程程序","children":[]}],"relativePath":"coroutine/index.md"}'),o={name:"coroutine/index.md"},p=l(`<h1 id="kotlin协程" tabindex="-1">Kotlin协程 <a class="header-anchor" href="#kotlin协程" aria-hidden="true">#</a></h1><h2 id="第一个协程程序" tabindex="-1">第一个协程程序 <a class="header-anchor" href="#第一个协程程序" aria-hidden="true">#</a></h2><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">kotlinx.coroutines.*</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">GlobalScope</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">launch </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 在后台启动一个新的协程并继续</span></span>
<span class="line"><span style="color:#F07178;">        delay</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1000L</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 非阻塞的等待 1 秒钟（默认时间单位是毫秒）</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">World!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 在延迟后打印输出</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 协程已在等待时主线程还在继续</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">Thread</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2000L</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 阻塞主线程 2 秒钟来保证 JVM 存活</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>详细了解可通过 <a href="https://kotlinlang.org/docs/coroutines-overview.html" target="_blank" rel="noreferrer">Kotlin协程</a></p>`,4),e=[p];function t(c,r,i,F,y,D){return a(),n("div",null,e)}const h=s(o,[["render",t]]);export{_ as __pageData,h as default};
