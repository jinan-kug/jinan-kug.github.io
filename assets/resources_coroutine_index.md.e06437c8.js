import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.a7175731.js";const h=JSON.parse('{"title":"Kotlin协程","description":"","frontmatter":{},"headers":[],"relativePath":"resources/coroutine/index.md","filePath":"resources/coroutine/index.md","lastUpdated":1696679356000}'),o={name:"resources/coroutine/index.md"},p=l(`<h1 id="kotlin协程" tabindex="-1">Kotlin协程 <a class="header-anchor" href="#kotlin协程" aria-label="Permalink to &quot;Kotlin协程&quot;">​</a></h1><h2 id="第一个协程程序" tabindex="-1">第一个协程程序 <a class="header-anchor" href="#第一个协程程序" aria-label="Permalink to &quot;第一个协程程序&quot;">​</a></h2><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">kotlinx.coroutines.</span><span style="color:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fun</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    GlobalScope.</span><span style="color:#B392F0;">launch</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 在后台启动一个新的协程并继续</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">delay</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000L</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 非阻塞的等待 1 秒钟（默认时间单位是毫秒）</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;World!&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 在延迟后打印输出</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello,&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 协程已在等待时主线程还在继续</span></span>
<span class="line"><span style="color:#E1E4E8;">    Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2000L</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 阻塞主线程 2 秒钟来保证 JVM 存活</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">kotlinx.coroutines.</span><span style="color:#005CC5;">*</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fun</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    GlobalScope.</span><span style="color:#6F42C1;">launch</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 在后台启动一个新的协程并继续</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">delay</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000L</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 非阻塞的等待 1 秒钟（默认时间单位是毫秒）</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;World!&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 在延迟后打印输出</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello,&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 协程已在等待时主线程还在继续</span></span>
<span class="line"><span style="color:#24292E;">    Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2000L</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 阻塞主线程 2 秒钟来保证 JVM 存活</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>详细了解可通过 <a href="https://kotlinlang.org/docs/coroutines-overview.html" target="_blank" rel="noreferrer">Kotlin协程</a></p>`,4),e=[p];function t(c,r,i,y,E,d){return n(),a("div",null,e)}const F=s(o,[["render",t]]);export{h as __pageData,F as default};
